Для всех:
Названия для функций должны начинаться с ГЛАГОЛА. 
Когда вы выполните то, что есть в этой todo, делаете коммит (с пометкой [todo fixes]) и говорите мне. 


physic:
1) У нас в проекте теперь уже есть класс Point2f. Нужно будет подтянуть изменения из мастера
2) Создать свой example. Пусть это будет куча объектов (около 20), сталкивающихся друг с другом
3) Не пытайся писать длинных однострочных выражений (тем более математических), их сложно читать
4) collision_point - плохое название. Что делает 
5) Нужно уже выносить функциональность непосредственно в движок. 
6) { ; } - довольно странная конструкция, точка с запятой не нужна.
7) 32767 - что за магическая константа?
8) Названия переменных. Я понимаю, что это математический код, но в некоторых случаях названия могут быть и получше (например Vector2f i)
9) EPSILON = 0.00001 такую штуку лучше писать EPSILON = 1e-5

Текущий приоритет: перенос функциональности в движок



xml_parser:
1) for(std::string str : tag)  - в таком случае str лучше делать константной ссылкой

2)  for(int i = 0; i <= depth; i++) out->stream() << '\t';
    out->stream() << str << std::endl;

должно бьть так:

    for(int i = 0; i <= depth; i++) {
        out->stream() << '\t';
    }
    out->stream() << str << std::endl;

3) в re::XmlElem::print не нужно создавать outlog в куче. Лучше просто создать в стеке, а в printXmlElemRec уже передавать адрес переменной (через амперсант)
4) fieldName и fieldData можно сделать через std::map
5) inputFile - плохое название для переменной, которая содержит имя файла, а не сам файл.
6) так и не увидел отдельного примера и теста
7) Нужно бы избавиться от new / delete и использовать shared_ptr

Текущий приоритет: проверить, что он нормально считывает и начать пилить парсинг файлов левела (получить их можно у Васи). Далее убедиться, что парсер работает стабильно и при неправильном xml выдает ошибку.


openGL:
1) glRecti(x0,y0,x0+r,y0+r); - пробелы
2) void swap( unsigned char &a, unsigned char &b )
{a^=b^=a^=b;} - для этого есть std::swap
И вообще такие конструкции лучше не писать (да, меньше переменных, зато больше операций и куда более худшая читаемость)
3) Код класса openGL все-таки должен быть в папке window
4) #define GL OpenGL::instance() - вот так лучше не делать. Во-первых непонятно что такое GL (нужно искать его определение), а во-вторых использование макросов - несколько опасное занятие. Вообще удивляюсь как оно без ошибок работает (замена GL на выражение)
5) Нужно уметь устанавливать fps

Текущий приоритет: подготовить код к мерджу в мастер

math:
1) length0 - должна называться просто length, а length текущее - distance_to
2) Нужно добавить конструктор по-умолчанию, т.е. конструктор, который не принимает параметров (и ставит их в нули)
3) нужны операторы += -= *= /= 
4) normalizedp - лишнее. Операция 
    Point2f new = old
    new.normilize()
не сильно длиннее, но проще.
5) Добавить метод is_null()
Вася, дальше нужно в классе Image реализовать метод set_subimage(int x, int y, ImagePtr source), который должен записывать из source в текущее изображение (по координате x,y)


Настя + Данил:
Нужно начать реализовать GUI. 
Нужно сделать главное меню (для этого нужно сделать состояние гл. меню и игра), и кнопки. Дальше подумайте, как сделать класс кнопки, чтобы его можно было легко создавать и встраивать в код.