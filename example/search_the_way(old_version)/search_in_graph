#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;

int main()
{
    int n, start, end, index;
    cin >> n >> start >>end;
    int* parent = new int[n];
    int* count = new int[n];
    int A[100][100];
    vector<int> way;


    queue<int> wave;

    for(int i = 0; i < n; i++){
        count [i] = -1;
        for(int j = 0; j < n; j++){
           cin >> A[i][j];
       }
    }
    wave.push(start);
    index = start;
    count [index] = 0;
    while(index != end)
    {
        for(int i = 0; i < n; i++)
        {
            if((A[index][i] == 1) && (count[i] == -1))
            {
                wave.push(i);
                count[i] = count[index] + 1;
                parent[i] = index;
            }
        }
        index = wave.front();
        wave.pop();
    }


    int k = end;;



    while(parent[k] != start)
    {
        way.push_back(parent[k]);
        k = parent[k];
    }
        reverse(way.begin(), way.end());

    for(int i = 0; i < count[end] - 1; i++)
        cout << way[i];



   /* for(int i = 0; i < n; i++)
        cout << parent[i] << " ";


    int* way = new int [count[end] + 1];
    way[count[end]] = end;

    for(int i = count[end] - 1; i >= 0; i--)
        way[i] = parent[way[i - 1]];


    for(int i = 0; i < count[end] + 1; i++)
        cout << way[i] << " ";

  */  



return 0;
}